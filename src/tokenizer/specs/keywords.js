export const keywords = [

    { type: 'INCLUDESBLOCK', regex: /^includes/ },
    { type: 'HASH', regex: /^#/ },
    { type: 'INCLUDE', regex: /^include/ },
    { type: 'VARIABLESBLOCK', regex: /^variables/ },
    { type: 'IF', regex: /^if/ },
    { type: 'ELSE', regex: /^else/ },
    { type: 'SWITCH', regex: /^switch/ },
    { type: 'CASE', regex: /^case/ },
    { type: 'DEFAULT', regex: /^default/ },
    { type: 'FOR', regex: /^for/ },
    { type: 'WHILE', regex: /^while/ },
    { type: 'DO', regex: /^do/ },
    { type: 'BREAK', regex: /^break/ },
    { type: 'CONTINUE', regex: /^continue/ },
    { type: 'RETURN', regex: /^return/ },
    { type: 'THIS', regex: /^this/ },
    { type: 'PI', regex: /^pi/ },
    { type: 'ONENVVAR', regex: /^on EnvVar/ },
    { type: 'ONSYSVARCHANGE', regex: /^on SysVar_Change/ },
    { type: 'ONSYSVARUPDATE', regex: /^on SysVar_Update/ },
    { type: 'ONSYSVAR', regex: /^on SysVar/ },
    { type: 'ONKEY', regex: /^on Key/ },
    { type: 'ONTIMER', regex: /^on Timer/ },
    { type: 'ONREPLAYSOURCESTATUSCHANGED', regex: /^on ReplaySourceStatusChanged/ },
    { type: 'ONOFFLINESOURCESTATUSCHANGED', regex: /^on OfflineSourceStatusChanged/ },
    { type: 'ONPRESTART', regex: /^on PreStart/ },
    { type: 'ONSTART', regex: /^on Start/ },
    { type: 'ONPRESTOP', regex: /^on PreStop/ },
    { type: 'ONSTOPMEASUREMENT', regex: /^on StopMeasurement/ },
    { type: 'ONPDU', regex: /^on PDU/ },
    { type: 'ONTESTCONTEXTCOMPLETED', regex: /^on TestContextCompleted/ },
    // CAN
    { type: 'ONERRORFRAME', regex: /^on ErrorFrame/ },
    { type: 'ONMESSAGE', regex: /^on Message/ },
    { type: 'ONSUGNALCHANGE', regex: /^on Signal_Change/ },
    { type: 'ONSIGNALUPDATE', regex: /^on Signal_Update/ },
    { type: 'ONSIGNAL', regex: /^on Signal/ },
    { type: 'ONBUSOFF', regex: /^on BusOff/ },
    { type: 'ONERRORACTIVE', regex: /^on ErrorActive/ },
    { type: 'ONERRORPASSIVE', regex: /^on ErrorPassive/ },
    { type: 'ONWARNINGLIMIT', regex: /^on WarningLimit/ },
    // LIN
    { type: 'ONLINFRAME', regex: /^on LINFrame/ },
    { type: 'ONLINBAUDRATEEVENT', regex: /^on LINBaudRateEvent/ },
    { type: 'ONLINDLCINFO', regex: /^on LINDLCInfo/ },
    { type: 'ONLINTRANSMITERROR', regex: /^on LINTransmitError/ },
    // Ethernet
    { type: 'ONETHERNETERRORPACKET', regex: /^on EthernetErrorPacket/ },
    { type: 'ONETHERNETPACKET', regex: /^on EthernetPacket/ },
    { type: 'ONETHERNETPACKETFORWARDED', regex: /^on EthernetPacketForwarded/ },
    { type: 'ONETHERNETPHYSTATE', regex: /^on EthernetPhyState/ },
    { type: 'ONETHERNETSTATUS', regex: /^on EthernetStatus/ },
    { type: 'ONSERVICESIGNALUPDATE', regex: /^on ServiceSignal_Update/ },
    { type: 'ONSERVICESIGNAL', regex: /^on ServiceSignal/ },

    { type: 'ON', regex: /^on/ },

];

